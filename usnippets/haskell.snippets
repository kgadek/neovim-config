snippet pragma "" b
{-# ${1:LANGUAGE} $2 #-}
endsnippet

snippet imp "" b
import           ${1:Module}
endsnippet

snippet imps "" b
import           ${1:Module} ($2)
endsnippet

snippet impq "" b
import qualified ${1:Module}
endsnippet

snippet impqs "" b
import qualified ${1:Module} ($2)
endsnippet

snippet newt "" b
newtype ${1:Wrapper}${0: a}
  = ${2:$1} ${3:Type}
  deriving (${4:Show})
endsnippet

snippet newtr "" b
newtype ${1:Wrapper}${0: a}
  = ${2:$1} { un$1 :: ${3:Type} }
  deriving (${4:Show})
endsnippet

snippet dat "" b
data $1
  = $0
	deriving ($2)
endsnippet

snippet cls "" b
class $1 where
  $0
endsnippet

snippet \ ""
\\${1:x} -> ${0:expr}
endsnippet

snippet (\ ""
(\\${1:x} -> ${0:expr})
endsnippet

snippet let ""
let ${1:x} = ${2:y}
 in ${VISUAL}$0
endsnippet

global !p
def create_hsdata_placeholders(snip):
		placeholders_count = int(snip.buffer[snip.line].strip())
		snip.buffer[snip.line] = ''
		body = "data $1"
		if placeholders_count > 0:
				body += "\n  = $2"
		body += ''.join('\n  | $' + str(i+3) for i in range(placeholders_count-1))
		body += '$0\n  deriving ($' + str(placeholders_count+2) + ')'

		snip.expand_anon(body)
endglobal

post_jump "create_hsdata_placeholders(snip)"
snippet "dat(\d+)" "" r
`!p snip.rv = match.group(1)`
endsnippet
