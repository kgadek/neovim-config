snippet mod "Module export-all" b
module $1 where

$0
endsnippet

snippet mods "Module export-all" b
module $1 (
		${2:Foo
	, Bar}
	) where

$0
endsnippet

snippet pragma "Pragma" b
{-# ${1:LANGUAGE} ${0:FlexibleContexts} #-}
endsnippet

snippet lang "Language pragma" b
{-# LANGUAGE ${0:FlexibleContexts} #-}
endsnippet

snippet moda "Module exporting all" b
module ${1:Main} where${0}
endsnippet

snippet mod "Module with explicit export list" b
module ${1:Main} (
    ${2:foo
  , bar}
) where${0}
endsnippet

snippet imp "Import" b
import           ${1:Module}
endsnippet

snippet imps "Import selected" b
import           ${1:Module} (${2:Foo(foo), bar})
endsnippet

snippet impq "Import qualified" b
import qualified ${1:The.Module} as ${2:TM}
endsnippet

snippet impqs "Import qualified, selected" b
import qualified ${1:The.Module} as ${2:TM} (${3:Foo(foo), bar})
endsnippet

snippet newt "Newtype" b
newtype ${1:Wrapper}${2: a}
  = $1 ${3:$2}
  deriving (${4:Show})
endsnippet

snippet newtr "Newtype w/ unwrapper" b
newtype ${1:Wrapper}${2: Int}
  = $1 { un$1 :: $2 }
  deriving (${3:Show})
endsnippet

snippet data "ADT (simple)" b
data $1
  = $2$0
	deriving ($3)
endsnippet

snippet gadt "GADT declaration" b
data ${1:Maybe} :: ${2:* -> *} where
    ${0:Nothing} :: $1 a
endsnippet

snippet class "Class" b
class ${1:Show} ${2:a} where
    ${0:show :: $2 -> String}
endsnippet

snippet inst "Instance block" b
instance ${1:Show Type} where
    ${0:show x = "?"}
endsnippet

snippet instder "Instance deriving" b
deriving instance ($1 ${0:a}) => ${1:Show} (${2:Type})
endsnippet

snippet \ "Lambda"
\\${1:x} -> ${0:expr}
endsnippet

snippet (\ "Lambda in parens"
(\\${1:x} -> ${2:expr})$0
endsnippet

snippet let "pure let"
let ${1:x} = ${2:${VISUAL:v}}
 in $0
endsnippet

snippet typefo "Open type family" b
type family ${1:G a}
${0:G Int = Bool}
endsnippet

snippet typefc "Closed type family" b
type family ${1:G a} where
    ${0:G Int = Bool}
endsnippet

snippet pred "Predicate"
(${0:Show a}) => ${VISUAL}
endsnippet

snippet funp "One-line function w/ pred" b
${1:myFun} :: (${3:Show a}) => ${2:a -> IO Missles}
$1 ${4:x} = ${0:body}
endsnippet

snippet fun "One-line function" b
${1:myFun} :: ${2:Int -> IO Missles}
$1 ${3:x} = ${0:body}
endsnippet

snippet funw "Function with 'where' clause" b
${1:myFun} :: ${2:Int -> IO Missles}
$1 ${3:x} = ${0:body}
    ${0:body}
	where
endsnippet

snippet case "Case clause"
case ${1:x} of
  ${2:_} -> ${0:Nothing}
endsnippet

global !p
def create_hsdata_placeholders(snip):
		placeholders_count = int(snip.buffer[snip.line].strip())
		snip.buffer[snip.line] = ''
		body = "data $1"
		if placeholders_count > 0:
				body += "\n  = $2"
		body += ''.join('\n  | $' + str(i+3) for i in range(placeholders_count-1))
		body += '$0\n  deriving ($' + str(placeholders_count+2) + ')'

		snip.expand_anon(body)
endglobal

post_jump "create_hsdata_placeholders(snip)"
snippet "dat(\d+)" "" r
`!p snip.rv = match.group(1)`
endsnippet

